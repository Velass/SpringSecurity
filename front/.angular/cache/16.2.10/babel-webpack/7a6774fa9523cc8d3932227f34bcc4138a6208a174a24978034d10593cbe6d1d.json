{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class AuthService {\n  intercept(request, next) {\n    const modifiedRequest = request.clone({\n      withCredentials: true\n    });\n    return next.handle(modifiedRequest);\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac\n  });\n}","map":{"version":3,"names":["AuthService","intercept","request","next","modifiedRequest","clone","withCredentials","handle","_","_2","factory","ɵfac"],"sources":["C:\\Users\\pc\\Desktop\\diginamic\\19. Spring\\Depot\\Depot4\\2023-11-16-spring-security_mini-projet\\front\\src\\app\\service\\auth\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpInterceptor,\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class AuthService implements HttpInterceptor {\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    const modifiedRequest = request.clone({ withCredentials: true });\n    return next.handle(modifiedRequest);\n  }\n\n  // checkAuthenticated(): boolean {\n  //   // Ajoutez ici la logique pour vérifier si un cookie est présent\n  //   // Retournez true si l'utilisateur est authentifié, sinon false\n  //   return !!document.cookie;\n  // }\n}"],"mappings":";AAUA,OAAM,MAAOA,WAAW;EACtBC,SAASA,CACPC,OAAyB,EACzBC,IAAiB;IAEjB,MAAMC,eAAe,GAAGF,OAAO,CAACG,KAAK,CAAC;MAAEC,eAAe,EAAE;IAAI,CAAE,CAAC;IAChE,OAAOH,IAAI,CAACI,MAAM,CAACH,eAAe,CAAC;EACrC;EAAC,QAAAI,CAAA,G;qBAPUR,WAAW;EAAA;EAAA,QAAAS,EAAA,G;WAAXT,WAAW;IAAAU,OAAA,EAAXV,WAAW,CAAAW;EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}